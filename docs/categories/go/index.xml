<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Scholer&#39;s Homapage</title>
    <link>http://0x1.im/categories/go/</link>
    <description>Recent content in go on Scholer&#39;s Homapage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <lastBuildDate>Wed, 08 Jul 2020 09:39:40 +0000</lastBuildDate>
    
	<atom:link href="http://0x1.im/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 Golang 实现一个 JSON 命令行工具</title>
      <link>http://0x1.im/posts/2020-07-08-a-json-toys/</link>
      <pubDate>Wed, 08 Jul 2020 09:39:40 +0000</pubDate>
      
      <guid>http://0x1.im/posts/2020-07-08-a-json-toys/</guid>
      <description>首先先提一个问题，&amp;quot;abc&amp;quot; 、123 或者 [1, 2, 3] 是不是一个合法的 json ？
之前一直有在使用一个 json 的命令行工具 jq，这个工具是基于 flex 和 bison 来实现的（去了解这些是基于当年学习 php 的经历）。后来有段时间我又发现一个不错的词法和语法分析工具 antlr，它支持多种语言的生成，并且本身也提供了多种语言的基本语法文件。所以我就想能不用基于它实现一个 go 语言版的 json 命令行工具。
下面就开始一步一步行动吧（如果想直接看代码可以直接拉到底部），我将这个项目命名为 jtlr。
提供的功能 根据我自己常使用的场景，我要实现以下几个功能：
基本用法：
 jtlr &amp;lsquo;{&amp;ldquo;a&amp;rdquo;: 1}&amp;rsquo;
 交互模式，可以多次输入，并且最好能支持上下切换：
 jtlr -a
 从标准输入中读取内容，可以格式化实时输出的日志：
 tail -f xxx.log | jtlr -s
 从文件中读取：
 jtlr -f xxx.log
 什么是 json 在动手之前，先要对 json 有一个全面的认识。先来大致看一下官网提供的 json 的 BNF 范式的起始部分：
json element value object array string number &amp;quot;true&amp;quot; &amp;quot;false&amp;quot; &amp;quot;null&amp;quot; .</description>
    </item>
    
    <item>
      <title>写给 PHP 程序员的 Go 入门教程</title>
      <link>http://0x1.im/posts/2020-05-26-way-from-php-to-go/</link>
      <pubDate>Tue, 26 May 2020 10:41:41 +0000</pubDate>
      
      <guid>http://0x1.im/posts/2020-05-26-way-from-php-to-go/</guid>
      <description>这两年唱衰 PHP 的论调不少（其实我觉得大可不必），导致不少 PHP 程序员产生危机感，纷纷寻求转型，根据我的观察，基本上 Go 都是首选。不管怎么说，技多不压身，多掌握一点知识总是好的。本文就作为一个基础的入门来帮助 PHP 程序员入门 Go 语言吧。
1. 脚本语言 vs 编译型语言 这其实是个我每次面试都会问的问题，脚本语言和编译型语言有什么区别。维基上的解释：
 语法和结构通常比较简单 学习和使用通常比较简单 通常以容易修改程序的“解释”作为运行方式，而不需要“编译” 程序的开发产能优于运行性能  从我的角度，可以从执行角度和环境依赖上来说。
简单理解，作为脚本语言，你可以单独写一行 &amp;lt;?php echo &amp;quot;Hello World&amp;quot;;，命名为任意文件，然后使用 php 解释器来执行。甚至可以使用 php -a 进入交互环境执行任何代码。
go 这种编译型语言就不是这样。因为是先编译后执行，go 一定需要知道程序的入口文件和入口函数。所以一个程序的执行一定需要 main 函数（go test 文件除外）。虽然 go 也提供了 run 指令省略到编译的步骤。
在环境依赖上，执行 php 的服务器一定需要预装固定版本 php 解释器，而编译成二进制文件的 go 程序则只需要在对应架构的服务器上即可运行。这本质上是 php 的解释器扮演的才是 go 编译后的程序的角色，而脚本则是在 php 解释器构建的一层虚拟机上执行的。所以脚本语言在不同平台上表现的一致性更好，而使用编译型语言则需要有更好的操作系统和网络底层知识。
2. 动态语言 vs 静态语言 动态语言与静态语言又分别被称为弱类型语言和强类型语言，其实这样描述也更加形象。
PHP 会在执行的过程中做隐式类型转换（虽然也提供了类型转换的函数和关键字），go 的类型转换却需要手动、强制的来执行。
弱类型语言带来了很多便利性，但是也隐含了很多问题，以至于 PHP 要引入 === 这种比较方式，不过经验丰富的 PHP 开发应该是能在每一个变量定义之前都确认好它的数据类型的。go 语言中不存在隐式转换的问题，但是写起来肯定也没有那么爽，光是 int 都有多种长度的类型，会让很多新手不太适应，同样的道理，定义每一个变量之前都稍加思考，就能轻松解决这个问题。</description>
    </item>
    
  </channel>
</rss>